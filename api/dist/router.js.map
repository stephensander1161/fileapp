{"version":3,"sources":["../src/router.js"],"names":["AppRouter","app","setupRouters","db","get","uploadDir","upload","req","res","next","status","json","version","post","array","files","_","console","log","fileModels","each","fileObject","newFile","File","initWithObject","toJSON","push","length","collection","insertMany","err","result","error","message","Post","from","to","insertedIds","insertOne","sendEmail","Email","sendDownloadLink","info","fileId","params","id","find","_id","toArray","fileName","file","downloader","S3","downloadUrl","getDownloadUrl","redirect","postId","getPostById","archiver","FileArchiver","download","callback","postObjectId","ObjectID","limit","results","Error","fileIds","$in"],"mappings":"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","file":"router.js","sourcesContent":["import path from 'path';\r\nimport { version } from '../package.json';\r\nimport _ from 'lodash';\r\nimport File from './models/file';\r\nimport Post from './models/post';\r\nimport { ObjectID } from 'mongodb';\r\nimport FileArchiver from './archiver';\r\nimport Email from './email';\r\nimport S3 from './s3';\r\n\r\nclass AppRouter {\r\n\tconstructor(app) {\r\n\t\tthis.app = app;\r\n\t\tthis.setupRouters();\r\n\t}\r\n\r\n\tsetupRouters() {\r\n\t\tconst app = this.app;\r\n\t\tconst db = app.get('db');\r\n\t\tconst uploadDir = app.get('storageDir');\r\n\t\tconst upload = app.upload;\r\n\r\n\t\t//route routing.\r\n\t\tapp.get('/', (req, res, next) => {\r\n\t\t\treturn res.status(200).json({\r\n\t\t\t\tversion: version\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t//upload routing\r\n\t\tapp.post('/api/upload', upload.array('files'), (req, res, next) => {\r\n\t\t\tconst files = _.get(req, 'files', []);\r\n\r\n\t\t\tconsole.log('files objects from s3 multer', files);\r\n\t\t\tlet fileModels = [];\r\n\r\n\t\t\t_.each(files, (fileObject) => {\r\n\t\t\t\tconst newFile = new File(app).initWithObject(fileObject).toJSON();\r\n\t\t\t\tfileModels.push(newFile);\r\n\t\t\t});\r\n\r\n\t\t\tif (fileModels.length) {\r\n\t\t\t\tdb.collection('files').insertMany(fileModels, (err, result) => {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\treturn res.status(503).json({\r\n\t\t\t\t\t\t\terror: {\r\n\t\t\t\t\t\t\t\tmessage: 'unable to save your files'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet post = new Post(app)\r\n\t\t\t\t\t\t.initWithObject({\r\n\t\t\t\t\t\t\tfrom: _.get(req, 'body.from'),\r\n\t\t\t\t\t\t\tto: _.get(req, 'body.to'),\r\n\t\t\t\t\t\t\tmessage: _.get(req, 'body.message'),\r\n\t\t\t\t\t\t\tfiles: result.insertedIds\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.toJSON();\r\n\r\n\t\t\t\t\t// let save post object to posts collection\r\n\r\n\t\t\t\t\tdb.collection('posts').insertOne(post, (err, result) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\treturn res.status(503).json({ error: { message: 'Your upload could not be saved.' } });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// implement email sending to userwith download link.\r\n\r\n\t\t\t\t\t\t// send email\r\n\t\t\t\t\t\tconst sendEmail = new Email(app).sendDownloadLink(post, (err, info) => {\r\n\t\t\t\t\t\t\tsendEmail.sendDownloadLink(post, (err, info) => {\r\n\t\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t\tconsole.log('error sending email notify downloading link', err);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t//callback to react app with post details.\r\n\t\t\t\t\t\treturn res.json(post);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn res.status(503).json({\r\n\t\t\t\t\terror: { message: 'file upload is required' }\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t//Download routing\r\n\r\n\t\tapp.get('/api/download/:id', (req, res, next) => {\r\n\t\t\tconst fileId = req.params.id;\r\n\r\n\t\t\tdb.collection('files').find({ _id: ObjectID(fileId) }).toArray((err, result) => {\r\n\t\t\t\tconst fileName = _.get(result, '[0].name');\r\n\r\n\t\t\t\tif (err || !fileName) {\r\n\t\t\t\t\treturn res.status(404).json({\r\n\t\t\t\t\t\terror: {\r\n\t\t\t\t\t\t\tmessage: 'file not found'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// download file from s3 service\r\n\t\t\t\tconst file = _.get(result, '[0]');\r\n\t\t\t\tconst downloader = new S3(app, res);\r\n\r\n\t\t\t\t//return downloader.download(file); Proxy download from s3 service\r\n\r\n\t\t\t\t//Download Directly from S3\r\n\r\n\t\t\t\tconst downloadUrl = downloader.getDownloadUrl(file);\r\n\r\n\t\t\t\treturn res.redirect(downloadUrl);\r\n\r\n\t\t\t\t/*const filePath = path.join(uploadDir, fileName);\r\n                return res.download(filePath, _.get(result, '[0].originalName'), (err) => {\r\n                    if(err){\r\n                        return res.status(404).json({\r\n                            error: {\r\n                                message: \"file not found\"\r\n                            }\r\n                        });\r\n                    }else{\r\n                        console.log(\"file downloaded\");\r\n                    }\r\n                });*/\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t//routing for post detail /api/posts/:id\r\n\r\n\t\tapp.get('/api/posts/:id', (req, res, next) => {\r\n\t\t\tconst postId = _.get(req, 'params.id');\r\n\r\n\t\t\tthis.getPostById(postId, (err, result) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn res.status(404).json({ error: { message: 'File not found.' } });\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn res.json(result);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t//routing download zip files.\r\n\t\tapp.get('/api/posts/:id/download', (req, res, next) => {\r\n\t\t\tconst id = _.get(req, 'params.id', null);\r\n\r\n\t\t\tthis.getPostById(id, (err, result) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn res.status(404).json({ error: { message: 'File not found.' } });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst files = _.get(result, 'files', []);\r\n\r\n\t\t\t\tconst archiver = new FileArchiver(app, files, res).download();\r\n\r\n\t\t\t\treturn archiver;\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetPostById(id, callback = () => {}) {\r\n\t\tconst app = this.app;\r\n\r\n\t\tconst db = app.get('db');\r\n\r\n\t\tlet postObjectId = null;\r\n\r\n\t\ttry {\r\n\t\t\tpostObjectId = new ObjectID(id);\r\n\t\t} catch (err) {\r\n\t\t\treturn callback(err, null);\r\n\t\t}\r\n\t\tdb.collection('posts').find({ _id: postObjectId }).limit(1).toArray((err, results) => {\r\n\t\t\tlet result = _.get(results, '[0]');\r\n\r\n\t\t\tif (err || !result) {\r\n\t\t\t\treturn callback(err ? err : new Error('file not found.'));\r\n\t\t\t}\r\n\r\n\t\t\tconst fileIds = _.get(result, 'files', []);\r\n\r\n\t\t\tdb.collection('files').find({ _id: { $in: fileIds } }).toArray((err, files) => {\r\n\t\t\t\tif (err || !files || !files.length) {\r\n\t\t\t\t\treturn callback(err ? err : new Error('file not found.'));\r\n\t\t\t\t}\r\n\t\t\t\tresult.files = files;\r\n\r\n\t\t\t\treturn callback(null, result);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default AppRouter;\r\n"]}